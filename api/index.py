import os
import json
import requests
from flask import Flask, request, jsonify

# --- LOGIC L·∫§Y GI√Å (Kh√¥ng thay ƒë·ªïi) ---
def get_token_price(network: str, token_address: str) -> tuple[float, str] | None:
    """
    L·∫•y gi√° v√† k√Ω hi·ªáu c·ªßa m·ªôt token t·ª´ API GeckoTerminal.
    Tr·∫£ v·ªÅ m·ªôt tuple (price, symbol) n·∫øu th√†nh c√¥ng, None n·∫øu c√≥ l·ªói.
    """
    url = f"https://api.geckoterminal.com/api/v2/networks/{network}/tokens/{token_address}"
    try:
        response = requests.get(url, headers={"accept": "application/json"})
        if response.status_code != 200:
            print(f"GeckoTerminal API error for {network}/{token_address}: Status {response.status_code}")
            return None
            
        data = response.json()
        attributes = data.get('data', {}).get('attributes', {})
        
        price_usd_str = attributes.get('price_usd')
        symbol = attributes.get('symbol', 'N/A')

        if price_usd_str:
            return (float(price_usd_str), symbol)
        else:
            print(f"Price not found in API response for {network}/{token_address}")
            return None

    except Exception as e:
        print(f"Error calling or parsing GeckoTerminal API: {e}")
        return None

# --- LOGIC T√çNH TO√ÅN PORTFOLIO (Kh√¥ng thay ƒë·ªïi) ---
def process_portfolio_text(message_text: str) -> str:
    """X·ª≠ l√Ω vƒÉn b·∫£n ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ chu·ªói k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng m·ªõi."""
    lines = message_text.strip().split('\n')
    total_value = 0.0
    result_lines = []
    
    for i, line in enumerate(lines):
        parts = line.strip().split()
        if len(parts) != 3:
            result_lines.append(f"D√≤ng {i+1}: ‚ùå L·ªói c√∫ ph√°p.")
            continue
        
        amount_str, address, network = parts
        try:
            amount = float(amount_str)
        except ValueError:
            result_lines.append(f"D√≤ng {i+1} ('{amount_str}'): ‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá.")
            continue
        
        price_data = get_token_price(network.lower(), address.lower())
        
        if price_data is not None:
            price, symbol = price_data
            value = amount * price
            total_value += value
            result_lines.append(
                f"*{symbol}*: ${price:,.4f} x {amount_str} = *${value:,.2f}*"
            )
        else:
            result_lines.append(f"‚ùå Kh√¥ng t√¨m th·∫•y gi√° cho `{address[:10]}...` tr√™n `{network}`.")

    final_result_text = "\n".join(result_lines)
    summary = f"\n--------------------\n*T·ªïng c·ªông: *${total_value:,.2f}**"
    
    return final_result_text + summary

# --- H√ÄM G·ª¨I/CH·ªàNH S·ª¨A TIN NH·∫ÆN TELEGRAM (C·∫≠p nh·∫≠t v√† th√™m m·ªõi) ---

### <<< THAY ƒê·ªîI: H√†m t·∫°o n√∫t b·∫•m ---
def create_refresh_button():
    """T·∫°o ƒë·ªëi t∆∞·ª£ng inline keyboard cho n√∫t Refresh."""
    keyboard = {
        'inline_keyboard': [[
            {'text': 'üîÑ Refresh', 'callback_data': 'refresh_portfolio'}
        ]]
    }
    return json.dumps(keyboard)

### <<< THAY ƒê·ªîI: C·∫≠p nh·∫≠t h√†m send_telegram_message ƒë·ªÉ c√≥ th·ªÉ reply v√† th√™m n√∫t ---
def send_telegram_message(chat_id, text, token, reply_to_message_id=None, reply_markup=None):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    if reply_to_message_id:
        payload['reply_to_message_id'] = reply_to_message_id
    if reply_markup:
        payload['reply_markup'] = reply_markup
        
    requests.post(url, json=payload)

### <<< THAY ƒê·ªîI: Th√™m h√†m m·ªõi ƒë·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn ---
def edit_telegram_message(chat_id, message_id, text, token, reply_markup=None):
    url = f"https://api.telegram.org/bot{token}/editMessageText"
    payload = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text,
        'parse_mode': 'Markdown'
    }
    if reply_markup:
        payload['reply_markup'] = reply_markup
        
    requests.post(url, json=payload)
    
### <<< THAY ƒê·ªîI: Th√™m h√†m ƒë·ªÉ x√°c nh·∫≠n ƒë√£ x·ª≠ l√Ω callback ---
def answer_callback_query(callback_query_id, token):
    """G·ª≠i x√°c nh·∫≠n cho Telegram ƒë·ªÉ d·ª´ng icon loading tr√™n n√∫t b·∫•m."""
    url = f"https://api.telegram.org/bot{token}/answerCallbackQuery"
    payload = {'callback_query_id': callback_query_id}
    requests.post(url, json=payload)


# --- WEB SERVER V·ªöI FLASK (C·∫≠p nh·∫≠t ƒë·ªÉ x·ª≠ l√Ω callback) ---
app = Flask(__name__)

@app.route('/', methods=['POST'])
def webhook():
    BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not BOT_TOKEN:
        return "Bot token not configured", 500

    data = request.get_json()
    
    # --- X·ª¨ L√ù TIN NH·∫ÆN TH√îNG TH∆Ø·ªúNG ---
    if "message" in data:
        chat_id = data["message"]["chat"]["id"]
        message_id = data["message"]["message_id"] # L·∫•y message_id ƒë·ªÉ reply
        message_text = data["message"]["text"]
        
        if message_text.strip() == "/start":
            start_message = (
                "G·ª≠i cho t√¥i danh s√°ch token c·ªßa b·∫°n ƒë·ªÉ t√≠nh to√°n t·ªïng gi√° tr·ªã.\n\n"
                "S·ª≠ d·ª•ng c√∫ ph√°p sau (m·ªói token m·ªôt d√≤ng):\n"
                "`[s·ªë l∆∞·ª£ng] [ƒë·ªãa ch·ªâ contract] [m·∫°ng]`\n\n"
                "V√≠ d·ª•:\n"
                "```\n"
                "357 0x22b1458e780f8fa71e2f84502cee8b5a3cc731fa bsc\n"
                "0.5 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eth\n"
                "```"
            )
            send_telegram_message(chat_id, start_message, BOT_TOKEN)
        else:
            # G·ª≠i tin nh·∫Øn t·∫°m th·ªùi b√°o ƒëang t√≠nh
            send_telegram_message(chat_id, "ƒêang t√≠nh to√°n, vui l√≤ng ch·ªù...", BOT_TOKEN)
            
            # X·ª≠ l√Ω t√≠nh to√°n portfolio
            result_text = process_portfolio_text(message_text)
            
            # ### <<< THAY ƒê·ªîI: T·∫°o n√∫t v√† g·ª≠i k·∫øt qu·∫£ k√®m theo n√∫t refresh
            refresh_button_markup = create_refresh_button()
            send_telegram_message(
                chat_id, 
                result_text, 
                BOT_TOKEN, 
                reply_to_message_id=message_id, # Reply l·∫°i tin nh·∫Øn g·ªëc
                reply_markup=refresh_button_markup
            )
            
    # ### <<< THAY ƒê·ªîI: X·ª¨ L√ù KHI NG∆Ø·ªúI D√ôNG NH·∫§N N√öT ---
    elif "callback_query" in data:
        callback_query = data["callback_query"]
        callback_id = callback_query["id"]
        
        # Lu√¥n g·ª≠i answer callback ƒë·ªÉ UI tr√™n Telegram m∆∞·ª£t m√†
        answer_callback_query(callback_id, BOT_TOKEN)
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i l·ªánh refresh kh√¥ng
        if callback_query.get("data") == "refresh_portfolio":
            chat_id = callback_query["message"]["chat"]["id"]
            message_id_to_edit = callback_query["message"]["message_id"]
            
            # Ki·ªÉm tra xem tin nh·∫Øn c√≥ reply kh√¥ng ƒë·ªÉ l·∫•y text g·ªëc
            if "reply_to_message" in callback_query["message"]:
                original_message_text = callback_query["message"]["reply_to_message"]["text"]
                
                # T√≠nh to√°n l·∫°i
                new_result_text = process_portfolio_text(original_message_text)
                
                # T·∫°o l·∫°i n√∫t
                refresh_button_markup = create_refresh_button()
                
                # Ch·ªânh s·ª≠a tin nh·∫Øn c≈© v·ªõi k·∫øt qu·∫£ m·ªõi
                edit_telegram_message(
                    chat_id, 
                    message_id_to_edit, 
                    new_result_text, 
                    BOT_TOKEN, 
                    reply_markup=refresh_button_markup
                )
            else:
                # Tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y tin nh·∫Øn g·ªëc (d·ª± ph√≤ng)
                edit_telegram_message(chat_id, message_id_to_edit, "L·ªói: Kh√¥ng t√¨m th·∫•y tin nh·∫Øn g·ªëc ƒë·ªÉ l√†m m·ªõi.", BOT_TOKEN)

    return jsonify(success=True)

# Vercel s·∫Ω t·ª± ƒë·ªông t√¨m v√† ch·∫°y ƒë·ªëi t∆∞·ª£ng `app` n√†y.