import os
import json
import requests
import hashlib
import hmac
from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import pytz
from redis import Redis
import google.generativeai as genai

# --- C·∫§U H√åNH ---
AUTO_SEARCH_NETWORKS = ['bsc', 'eth', 'tron', 'polygon', 'arbitrum', 'base']
TIMEZONE = pytz.timezone('Asia/Ho_Chi_Minh')
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CRON_SECRET = os.getenv("CRON_SECRET")
REMINDER_THRESHOLD_MINUTES = 30
SYMBOL_TO_ID_MAP = {'btc': 'bitcoin', 'eth': 'ethereum', 'bnb': 'binancecoin', 'sol': 'solana'}
# Bi·∫øn m√¥i tr∆∞·ªùng m·ªõi cho Google Gemini
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# C·∫•u h√¨nh th∆∞ vi·ªán Google Gemini m·ªôt c√°ch an to√†n
if GOOGLE_API_KEY:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
    except Exception as e:
        print(f"Error configuring Google Gemini: {e}")
        GOOGLE_API_KEY = None # V√¥ hi·ªáu h√≥a n·∫øu c·∫•u h√¨nh l·ªói

# --- K·∫æT N·ªêI C∆† S·ªû D·ªÆ LI·ªÜU ---
try:
    kv_url = os.getenv("teeboov2_REDIS_URL")
    if not kv_url: raise ValueError("teeboov2_REDIS_URL is not set.")
    kv = Redis.from_url(kv_url, decode_responses=True)
except Exception as e:
    print(f"FATAL: Could not connect to Redis. Error: {e}"); kv = None

# --- LOGIC QU·∫¢N L√ù C√îNG VI·ªÜC (Kh√¥ng thay ƒë·ªïi) ---
def parse_task_from_string(task_string: str) -> tuple[datetime | None, str | None]:
    try:
        time_part, name_part = task_string.split(' - ', 1)
        name_part = name_part.strip()
        if not name_part: return None, None
        now = datetime.now(TIMEZONE)
        dt_naive = datetime.strptime(time_part.strip(), '%d/%m %H:%M')
        return now.replace(month=dt_naive.month, day=dt_naive.day, hour=dt_naive.hour, minute=dt_naive.minute, second=0, microsecond=0), name_part
    except ValueError: return None, None
def add_task(chat_id, task_string: str) -> str:
    if not kv: return "L·ªói: Ch·ª©c nƒÉng l·ªãch h·∫πn kh√¥ng kh·∫£ d·ª•ng do kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB."
    task_dt, name_part = parse_task_from_string(task_string)
    if not task_dt or not name_part: return "‚ùå C√∫ ph√°p sai. D√πng: `DD/MM HH:mm - T√™n c√¥ng vi·ªác`."
    if task_dt < datetime.now(TIMEZONE): return "‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch cho qu√° kh·ª©."
    tasks = json.loads(kv.get(f"tasks:{chat_id}") or '[]')
    tasks.append({"time_iso": task_dt.isoformat(), "name": name_part, "reminded": False})
    tasks.sort(key=lambda x: x['time_iso'])
    kv.set(f"tasks:{chat_id}", json.dumps(tasks))
    return f"‚úÖ ƒê√£ th√™m l·ªãch: *{name_part}* l√∫c *{task_dt.strftime('%H:%M %d/%m/%Y')}*."
def edit_task(chat_id, index_str: str, new_task_string: str) -> str:
    if not kv: return "L·ªói: Ch·ª©c nƒÉng l·ªãch h·∫πn kh√¥ng kh·∫£ d·ª•ng do kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB."
    try: task_index = int(index_str) - 1; assert task_index >= 0
    except (ValueError, AssertionError): return "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá."
    new_task_dt, new_name_part = parse_task_from_string(new_task_string)
    if not new_task_dt or not new_name_part: return "‚ùå C√∫ ph√°p c√¥ng vi·ªác m·ªõi kh√¥ng h·ª£p l·ªá. D√πng: `DD/MM HH:mm - T√™n c√¥ng vi·ªác`."
    user_tasks = json.loads(kv.get(f"tasks:{chat_id}") or '[]')
    active_tasks = [t for t in user_tasks if datetime.fromisoformat(t['time_iso']) > datetime.now(TIMEZONE)]
    if task_index >= len(active_tasks): return "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá."
    task_to_edit_iso = active_tasks[task_index]['time_iso']
    for task in user_tasks:
        if task['time_iso'] == task_to_edit_iso:
            task['time_iso'] = new_task_dt.isoformat(); task['name'] = new_name_part; task['reminded'] = False; break
    user_tasks.sort(key=lambda x: x['time_iso'])
    kv.set(f"tasks:{chat_id}", json.dumps(user_tasks))
    return f"‚úÖ ƒê√£ s·ª≠a c√¥ng vi·ªác s·ªë *{task_index + 1}* th√†nh: *{new_name_part}*."
def list_tasks(chat_id) -> str:
    if not kv: return "L·ªói: Ch·ª©c nƒÉng l·ªãch h·∫πn kh√¥ng kh·∫£ d·ª•ng do kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB."
    user_tasks = json.loads(kv.get(f"tasks:{chat_id}") or '[]')
    active_tasks = [t for t in user_tasks if datetime.fromisoformat(t['time_iso']) > datetime.now(TIMEZONE)]
    if len(active_tasks) < len(user_tasks): kv.set(f"tasks:{chat_id}", json.dumps(active_tasks))
    if not active_tasks: return "B·∫°n kh√¥ng c√≥ l·ªãch h·∫πn n√†o s·∫Øp t·ªõi."
    result_lines = ["*üóìÔ∏è Danh s√°ch l·ªãch h·∫πn c·ªßa b·∫°n:*"]
    for i, task in enumerate(active_tasks):
        result_lines.append(f"*{i+1}.* `{datetime.fromisoformat(task['time_iso']).strftime('%H:%M %d/%m')}` - {task['name']}")
    return "\n".join(result_lines)
def delete_task(chat_id, task_index_str: str) -> str:
    if not kv: return "L·ªói: Ch·ª©c nƒÉng l·ªãch h·∫πn kh√¥ng kh·∫£ d·ª•ng do kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB."
    try: task_index = int(task_index_str) - 1; assert task_index >= 0
    except (ValueError, AssertionError): return "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá."
    user_tasks = json.loads(kv.get(f"tasks:{chat_id}") or '[]')
    active_tasks = [t for t in user_tasks if datetime.fromisoformat(t['time_iso']) > datetime.now(TIMEZONE)]
    if task_index >= len(active_tasks): return "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá."
    task_to_delete = active_tasks.pop(task_index)
    updated_tasks = [t for t in user_tasks if t['time_iso'] != task_to_delete['time_iso']]
    kv.set(f"tasks:{chat_id}", json.dumps(updated_tasks))
    return f"‚úÖ ƒê√£ x√≥a l·ªãch h·∫πn: *{task_to_delete['name']}*"

# --- LOGIC CRYPTO & TI·ªÜN √çCH BOT ---
def get_price_by_symbol(symbol: str) -> float | None:
    coin_id = SYMBOL_TO_ID_MAP.get(symbol.lower(), symbol.lower())
    url = "https://api.coingecko.com/api/v3/simple/price"; params = {'ids': coin_id, 'vs_currencies': 'usd'}
    try:
        res = requests.get(url, params=params, timeout=10)
        return res.json().get(coin_id, {}).get('usd') if res.status_code == 200 else None
    except requests.RequestException: return None

def get_crypto_explanation(query: str) -> str:
    """L·∫•y gi·∫£i th√≠ch v·ªÅ thu·∫≠t ng·ªØ crypto t·ª´ Google Gemini."""
    if not GOOGLE_API_KEY:
        return "‚ùå L·ªói c·∫•u h√¨nh: Thi·∫øu `GOOGLE_API_KEY`. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ thi·∫øt l·∫≠p."
    
    try:
        model = genai.GenerativeModel('gemini-2.5-pro')
        full_prompt = (
            "B·∫°n l√† m·ªôt tr·ª£ l√Ω chuy√™n gia v·ªÅ ti·ªÅn ƒëi·ªán t·ª≠. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch "
            "ng·∫Øn g·ªçn, s√∫c t√≠ch, v√† d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu. "
            "T·∫≠p trung v√†o c√°c kh√≠a c·∫°nh quan tr·ªçng nh·∫•t.\n\n"
            f"C√¢u h·ªèi: {query}"
        )
        response = model.generate_content(full_prompt)
        # Ki·ªÉm tra xem c√≥ n·ªôi dung tr·∫£ v·ªÅ kh√¥ng
        if response.parts:
            return response.text
        else:
            # ƒêi·ªÅu n√†y x·∫£y ra n·∫øu n·ªôi dung b·ªã b·ªô l·ªçc an to√†n ch·∫∑n
            return "‚ùå Kh√¥ng th·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi n√†y. C√≥ th·ªÉ n·ªôi dung ƒë√£ vi ph·∫°m ch√≠nh s√°ch an to√†n."
            
    except Exception as e:
        # In l·ªói chi ti·∫øt ra log c·ªßa Vercel ƒë·ªÉ debug
        print(f"Google Gemini API Error: {e}")
        # Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói chung cho ng∆∞·ªùi d√πng
        return f"‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi v·ªõi d·ªãch v·ª• gi·∫£i th√≠ch. Vui l√≤ng th·ª≠ l·∫°i sau."

def is_evm_address(s: str) -> bool: return isinstance(s, str) and s.startswith('0x') and len(s) == 42
def is_tron_address(s: str) -> bool: return isinstance(s, str) and s.startswith('T') and len(s) == 34
def is_crypto_address(s: str) -> bool: return is_evm_address(s) or is_tron_address(s)
def send_telegram_message(chat_id, text, **kwargs) -> int | None:
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {'chat_id': chat_id, 'text': text, 'parse_mode': 'Markdown', **kwargs}
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200 and response.json().get('ok'): return response.json().get('result', {}).get('message_id')
        print(f"Error sending message, response: {response.text}"); return None
    except requests.RequestException as e:
        print(f"Error sending message: {e}"); return None
def pin_telegram_message(chat_id, message_id):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/pinChatMessage"
    payload = {'chat_id': chat_id, 'message_id': message_id, 'disable_notification': False}
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code != 200: print(f"Error pinning message: {response.text}")
    except requests.RequestException as e: print(f"Error pinning message: {e}")
def edit_telegram_message(chat_id, msg_id, text, **kwargs):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
    payload = {'chat_id': chat_id, 'message_id': msg_id, 'text': text, 'parse_mode': 'Markdown', **kwargs}
    try: requests.post(url, json=payload, timeout=10)
    except requests.RequestException as e: print(f"Error editing message: {e}")
def answer_callback_query(cb_id):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
    try: requests.post(url, json={'callback_query_id': cb_id}, timeout=5)
    except requests.RequestException as e: print(f"Error answering callback: {e}")
def find_token_across_networks(address: str) -> str:
    for network in AUTO_SEARCH_NETWORKS:
        url = f"https://api.geckoterminal.com/api/v2/networks/{network}/tokens/{address}?include=top_pools"
        try:
            res = requests.get(url, headers={"accept": "application/json"}, timeout=10)
            if res.status_code == 200:
                data = res.json(); token_attr = data.get('data', {}).get('attributes', {})
                price = float(token_attr.get('price_usd', 0)); change = float(token_attr.get('price_change_percentage', {}).get('h24', 0))
                return (f"‚úÖ *T√¨m th·∫•y tr√™n m·∫°ng {network.upper()}*\n"
                        f"*{token_attr.get('name', 'N/A')} ({token_attr.get('symbol', 'N/A')})*\n\n"
                        f"Gi√°: *${price:,.8f}*\n24h: *{'üìà' if change >= 0 else 'üìâ'} {change:+.2f}%*\n\n"
                        f"üîó [Xem tr√™n GeckoTerminal](https://www.geckoterminal.com/{network}/tokens/{address})\n\n`{address}`")
        except requests.RequestException: continue
    return f"‚ùå Kh√¥ng t√¨m th·∫•y token v·ªõi ƒë·ªãa ch·ªâ `{address[:10]}...`."
def process_portfolio_text(message_text: str) -> str | None:
    lines = message_text.strip().split('\n'); total_value, result_lines, valid_lines_count = 0.0, [], 0
    for line in lines:
        parts = line.strip().split()
        if len(parts) != 3: continue
        try: amount = float(parts[0])
        except ValueError: continue
        address, network = parts[1], parts[2]
        if not is_crypto_address(address):
            result_lines.append(f"‚ùå ƒê·ªãa ch·ªâ `{address[:10]}...` kh√¥ng h·ª£p l·ªá."); continue
        valid_lines_count += 1
        url = f"https://api.geckoterminal.com/api/v2/networks/{network.lower()}/tokens/{address}"
        try:
            res = requests.get(url, headers={"accept": "application/json"}, timeout=10)
            if res.status_code == 200:
                attr = res.json().get('data', {}).get('attributes', {}); price = float(attr.get('price_usd', 0)); symbol = attr.get('symbol', 'N/A')
                value = amount * price; total_value += value
                result_lines.append(f"*{symbol}*: ${price:,.4f} x {amount} = *${value:,.2f}*")
            else: result_lines.append(f"‚ùå Kh√¥ng t√¨m th·∫•y gi√° cho `{address[:10]}...` tr√™n `{network}`")
        except requests.RequestException: result_lines.append(f"üîå L·ªói m·∫°ng khi l·∫•y gi√° cho `{address[:10]}...`")
    if valid_lines_count == 0: return None
    return "\n".join(result_lines) + f"\n--------------------\n*T·ªïng c·ªông: *${total_value:,.2f}**"

# --- WEB SERVER (FLASK) ---
app = Flask(__name__)
@app.route('/', methods=['POST'])
def webhook():
    if not BOT_TOKEN: return "Server configuration error", 500
    data = request.get_json()
    if "callback_query" in data:
        cb = data["callback_query"]; answer_callback_query(cb["id"])
        if cb.get("data") == "refresh_portfolio" and "reply_to_message" in cb["message"]:
            result = process_portfolio_text(cb["message"]["reply_to_message"]["text"])
            if result: edit_telegram_message(cb["message"]["chat"]["id"], cb["message"]["message_id"], text=result, reply_markup=cb["message"]["reply_markup"])
        return jsonify(success=True)
    if "message" not in data or "text" not in data["message"]: return jsonify(success=True)
    chat_id = data["message"]["chat"]["id"]; msg_id = data["message"]["message_id"]
    text = data["message"]["text"].strip(); parts = text.split(); cmd = parts[0].lower()
    if cmd.startswith('/'):
        if cmd == "/start":
            start_message = ("G√≤i, c·∫ßn g√¨ fen?\n\n"
                             "**Ch·ª©c nƒÉng L·ªãch h·∫πn:**\n"
                             "`/add DD/MM HH:mm - T√™n`\n"
                             "`/list`, `/del <s·ªë>`, `/edit <s·ªë> ...`\n\n"
                             "**Ch·ª©c nƒÉng Crypto:**\n"
                             "`/gia <k√Ω hi·ªáu>`\n"
                             "`/gt <thu·∫≠t ng·ªØ>` - Gi·∫£i th√≠ch (vd: /gt airdrop l√† g√¨)\n\n"
                             "1Ô∏è‚É£ *Tra c·ª©u Token theo Contract*\nCh·ªâ c·∫ßn g·ª≠i ƒë·ªãa ch·ªâ contract.\n"
                             "2Ô∏è‚É£ *T√≠nh Portfolio*\nG·ª≠i danh s√°ch theo c√∫ ph√°p:\n`[s·ªë l∆∞·ª£ng] [ƒë·ªãa ch·ªâ] [m·∫°ng]`")
            send_telegram_message(chat_id, text=start_message)
        elif cmd == '/add': send_telegram_message(chat_id, text=add_task(chat_id, " ".join(parts[1:])), reply_to_message_id=msg_id)
        elif cmd == '/list': send_telegram_message(chat_id, text=list_tasks(chat_id), reply_to_message_id=msg_id)
        elif cmd == '/del':
            if len(parts) > 1: send_telegram_message(chat_id, text=delete_task(chat_id, parts[1]), reply_to_message_id=msg_id)
            else: send_telegram_message(chat_id, text="C√∫ ph√°p: `/del <s·ªë>`", reply_to_message_id=msg_id)
        elif cmd == '/edit':
            if len(parts) < 3: send_telegram_message(chat_id, text="C√∫ ph√°p: `/edit <s·ªë> DD/MM HH:mm - T√™n m·ªõi`", reply_to_message_id=msg_id)
            else: send_telegram_message(chat_id, text=edit_task(chat_id, parts[1], " ".join(parts[2:])), reply_to_message_id=msg_id)
        elif cmd == '/gia':
            if len(parts) < 2: send_telegram_message(chat_id, text="C√∫ ph√°p: `/gia <k√Ω hi·ªáu>`", reply_to_message_id=msg_id)
            else:
                price = get_price_by_symbol(parts[1])
                if price: send_telegram_message(chat_id, text=f"Gi√° c·ªßa *{parts[1].upper()}* l√†: `${price:,.4f}`", reply_to_message_id=msg_id)
                else: send_telegram_message(chat_id, text=f"‚ùå Kh√¥ng t√¨m th·∫•y gi√° cho `{parts[1]}`.", reply_to_message_id=msg_id)
        elif cmd == '/gt':
            if len(parts) < 2:
                send_telegram_message(chat_id, text="C√∫ ph√°p: `/gt <c√¢u h·ªèi>`\nV√≠ d·ª•: `/gt airdrop l√† g√¨?`", reply_to_message_id=msg_id)
            else:
                query = " ".join(parts[1:])
                temp_msg_id = send_telegram_message(chat_id, text="ü§î ƒêang t√¨m hi·ªÉu, vui l√≤ng ch·ªù...", reply_to_message_id=msg_id)
                if temp_msg_id:
                    explanation = get_crypto_explanation(query)
                    edit_telegram_message(chat_id, temp_msg_id, text=explanation)
        return jsonify(success=True)
    if len(parts) == 1 and is_crypto_address(parts[0]):
        send_telegram_message(chat_id, text=find_token_across_networks(parts[0]), reply_to_message_id=msg_id, disable_web_page_preview=True)
    else:
        portfolio_result = process_portfolio_text(text)
        if portfolio_result:
            refresh_btn = {'inline_keyboard': [[{'text': 'üîÑ Refresh', 'callback_data': 'refresh_portfolio'}]]}
            send_telegram_message(chat_id, text=portfolio_result, reply_to_message_id=msg_id, reply_markup=json.dumps(refresh_btn))
        #else: send_telegram_message(chat_id, text="ü§î C√∫ ph√°p kh√¥ng h·ª£p l·ªá. G·ª≠i /start ƒë·ªÉ xem h∆∞·ªõng d·∫´n.", reply_to_message_id=msg_id)
    return jsonify(success=True)

@app.route('/check_reminders', methods=['POST'])
def cron_webhook():
    if not kv or not BOT_TOKEN or not CRON_SECRET: return jsonify(error="Server not configured"), 500
    secret = request.headers.get('X-Cron-Secret') or (request.is_json and request.get_json().get('secret'))
    if secret != CRON_SECRET: return jsonify(error="Unauthorized"), 403
    print(f"[{datetime.now()}] Running reminder check...")
    reminders_sent = 0
    for key in kv.scan_iter("tasks:*"):
        chat_id = key.split(':')[1]; user_tasks = json.loads(kv.get(key) or '[]')
        tasks_changed = False; now = datetime.now(TIMEZONE)
        for task in user_tasks:
            if not task.get("reminded", False):
                task_time = datetime.fromisoformat(task['time_iso'])
                time_until_due = task_time - now
                if timedelta(seconds=1) < time_until_due <= timedelta(minutes=REMINDER_THRESHOLD_MINUTES):
                    minutes_left = int(time_until_due.total_seconds() / 60)
                    reminder_text = f"‚ÄºÔ∏è *NH·∫ÆC NH·ªû @all* ‚ÄºÔ∏è\n\nS·ª± ki·ªán: *{task['name']}*\nS·∫Ω di·ªÖn ra trong kho·∫£ng *{minutes_left} ph√∫t* n·ªØa."
                    sent_message_id = send_telegram_message(chat_id, text=reminder_text)
                    if sent_message_id: pin_telegram_message(chat_id, sent_message_id)
                    task['reminded'] = True; tasks_changed = True; reminders_sent += 1
        if tasks_changed:
            kv.set(key, json.dumps(user_tasks))
    result = {"status": "success", "reminders_sent": reminders_sent}
    print(result)
    return jsonify(result)