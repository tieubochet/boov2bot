import os
import json
import requests
from flask import Flask, request, jsonify
from datetime import datetime
import pytz
from redis import Redis

# --- C·∫§U H√åNH ---
AUTO_SEARCH_NETWORKS = ['bsc', 'eth', 'polygon', 'arbitrum', 'base']
TIMEZONE = pytz.timezone('Asia/Ho_Chi_Minh')
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

# --- K·∫æT N·ªêI C∆† S·ªû D·ªÆ LI·ªÜU (VERCEL KV - REDIS) ---
try:
    kv_url = os.getenv("KV_URL")
    if not kv_url:
        raise ValueError("KV_URL is not set. Please connect a Vercel KV store to save tasks.")
    kv = Redis.from_url(kv_url, decode_responses=True)
except Exception as e:
    print(f"FATAL: Could not connect to Redis. Task features will be disabled. Error: {e}")
    kv = None

# --- LOGIC QU·∫¢N L√ù C√îNG VI·ªÜC (TH·ª¶ C√îNG) ---
def parse_user_time(time_str: str) -> datetime | None:
    """Ph√¢n t√≠ch c√∫ ph√°p th·ªùi gian ng∆∞·ªùi d√πng nh·∫≠p, gi·∫£ ƒë·ªãnh l√† UTC+7."""
    now = datetime.now(TIMEZONE)
    clean_time_str = time_str.strip().strip('<>')
    try:
        dt_naive = datetime.strptime(clean_time_str, '%d/%m %H:%M')
        # √Åp d·ª•ng nƒÉm hi·ªán t·∫°i v√† m√∫i gi·ªù
        return now.replace(
            month=dt_naive.month, day=dt_naive.day,
            hour=dt_naive.hour, minute=dt_naive.minute,
            second=0, microsecond=0
        )
    except ValueError:
        return None

def add_task(chat_id, task_string: str) -> str:
    """Th√™m m·ªôt c√¥ng vi·ªác m·ªõi v√†o Redis."""
    if not kv: return "L·ªói: Ch·ª©c nƒÉng l·ªãch h·∫πn kh√¥ng kh·∫£ d·ª•ng do kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB."

    try:
        time_part, name_part = task_string.split('>', 1)
        time_part += '>'
        name_part = name_part.lstrip(': ').strip()
        if not name_part: raise ValueError
    except ValueError:
        return "‚ùå C√∫ ph√°p sai. D√πng: `<DD/MM HH:mm>:<T√™n c√¥ng vi·ªác>`."

    task_dt = parse_user_time(time_part)
    if not task_dt: return "‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian sai. D√πng `<DD/MM HH:mm>`."
    if task_dt < datetime.now(TIMEZONE): return "‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch cho qu√° kh·ª©."

    tasks_json = kv.get(f"tasks:{chat_id}")
    tasks = json.loads(tasks_json) if tasks_json else []
    
    tasks.append({"time_iso": task_dt.isoformat(), "name": name_part})
    tasks.sort(key=lambda x: x['time_iso'])
    kv.set(f"tasks:{chat_id}", json.dumps(tasks))
    
    return f"‚úÖ ƒê√£ th√™m l·ªãch: *{name_part}* l√∫c *{task_dt.strftime('%H:%M %d/%m/%Y')}*."

def list_tasks(chat_id) -> str:
    """Li·ªát k√™ c√°c c√¥ng vi·ªác ch∆∞a ƒë·∫øn h·∫°n t·ª´ Redis."""
    if not kv: return "L·ªói: Ch·ª©c nƒÉng l·ªãch h·∫πn kh√¥ng kh·∫£ d·ª•ng do kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB."
    
    tasks_json = kv.get(f"tasks:{chat_id}")
    if not tasks_json: return "B·∫°n kh√¥ng c√≥ l·ªãch h·∫πn n√†o."

    user_tasks = json.loads(tasks_json)
    now = datetime.now(TIMEZONE)
    active_tasks = [t for t in user_tasks if datetime.fromisoformat(t['time_iso']) > now]

    if len(active_tasks) < len(user_tasks): # T·ª± ƒë·ªông d·ªçn d·∫πp task c≈© khi ng∆∞·ªùi d√πng /list
        kv.set(f"tasks:{chat_id}", json.dumps(active_tasks))

    if not active_tasks: return "B·∫°n kh√¥ng c√≥ l·ªãch h·∫πn n√†o s·∫Øp t·ªõi."
    
    result_lines = ["*üóìÔ∏è Danh s√°ch l·ªãch h·∫πn c·ªßa b·∫°n:*"]
    for i, task in enumerate(active_tasks):
        dt = datetime.fromisoformat(task['time_iso'])
        result_lines.append(f"*{i+1}.* `{dt.strftime('%H:%M %d/%m')}` - {task['name']}")
    return "\n".join(result_lines)

def delete_task(chat_id, task_index_str: str) -> str:
    """X√≥a m·ªôt c√¥ng vi·ªác theo s·ªë th·ª© t·ª±."""
    if not kv: return "L·ªói: Ch·ª©c nƒÉng l·ªãch h·∫πn kh√¥ng kh·∫£ d·ª•ng do kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB."

    try:
        task_index = int(task_index_str) - 1
        if task_index < 0: raise ValueError
    except ValueError: return "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá."

    user_tasks = json.loads(kv.get(f"tasks:{chat_id}") or '[]')
    active_tasks = [t for t in user_tasks if datetime.fromisoformat(t['time_iso']) > datetime.now(TIMEZONE)]

    if task_index >= len(active_tasks): return "‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá."

    task_to_delete = active_tasks.pop(task_index)
    updated_tasks = [t for t in user_tasks if t['time_iso'] != task_to_delete['time_iso']]
    kv.set(f"tasks:{chat_id}", json.dumps(updated_tasks))
    
    return f"‚úÖ ƒê√£ x√≥a l·ªãch h·∫πn: *{task_to_delete['name']}*"

# --- LOGIC CRYPTO & TI·ªÜN √çCH BOT ---
def is_evm_address(s: str) -> bool: return isinstance(s, str) and s.startswith('0x') and len(s) == 42

def send_telegram_message(chat_id, text, **kwargs):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {'chat_id': chat_id, 'text': text, 'parse_mode': 'Markdown', **kwargs}
    try: requests.post(url, json=payload, timeout=10)
    except requests.RequestException as e: print(f"Error sending message: {e}")

def edit_telegram_message(chat_id, msg_id, text, **kwargs):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
    payload = {'chat_id': chat_id, 'message_id': msg_id, 'text': text, 'parse_mode': 'Markdown', **kwargs}
    try: requests.post(url, json=payload, timeout=10)
    except requests.RequestException as e: print(f"Error editing message: {e}")

def answer_callback_query(cb_id):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
    try: requests.post(url, json={'callback_query_id': cb_id}, timeout=5)
    except requests.RequestException as e: print(f"Error answering callback: {e}")

def find_token_across_networks(address: str) -> str:
    for network in AUTO_SEARCH_NETWORKS:
        url = f"https://api.geckoterminal.com/api/v2/networks/{network}/tokens/{address}?include=top_pools"
        try:
            res = requests.get(url, headers={"accept": "application/json"}, timeout=5)
            if res.status_code == 200:
                data = res.json()
                token_attr = data.get('data', {}).get('attributes', {})
                price = float(token_attr.get('price_usd', 0))
                change = float(token_attr.get('price_change_percentage', {}).get('h24', 0))
                return (
                    f"‚úÖ *T√¨m th·∫•y tr√™n m·∫°ng {network.upper()}*\n"
                    f"*{token_attr.get('name', 'N/A')} ({token_attr.get('symbol', 'N/A')})*\n\n"
                    f"Gi√°: *${price:,.8f}*\n"
                    f"24h: *{'üìà' if change >= 0 else 'üìâ'} {change:+.2f}%*\n\n"
                    f"üîó [Xem tr√™n GeckoTerminal](https://www.geckoterminal.com/{network}/tokens/{address})\n\n"
                    f"`{address}`"
                )
        except requests.RequestException: continue
    return f"‚ùå Kh√¥ng t√¨m th·∫•y token v·ªõi ƒë·ªãa ch·ªâ `{address[:10]}...`."

def process_portfolio_text(message_text: str) -> str | None:
    lines = message_text.strip().split('\n')
    total_value, result_lines, valid_lines_count = 0.0, [], 0
    for line in lines:
        parts = line.strip().split()
        if len(parts) != 3: continue
        try: amount = float(parts[0])
        except ValueError: continue
        
        valid_lines_count += 1
        address, network = parts[1], parts[2]
        url = f"https://api.geckoterminal.com/api/v2/networks/{network.lower()}/tokens/{address.lower()}"
        try:
            res = requests.get(url, headers={"accept": "application/json"}, timeout=5)
            if res.status_code == 200:
                attr = res.json().get('data', {}).get('attributes', {})
                price = float(attr.get('price_usd', 0))
                symbol = attr.get('symbol', 'N/A')
                value = amount * price
                total_value += value
                result_lines.append(f"*{symbol}*: ${price:,.4f} x {amount} = *${value:,.2f}*")
            else:
                result_lines.append(f"‚ùå Kh√¥ng t√¨m th·∫•y gi√° cho `{address[:10]}...`")
        except requests.RequestException:
            result_lines.append(f"üîå L·ªói m·∫°ng khi l·∫•y gi√° cho `{address[:10]}...`")

    if valid_lines_count == 0: return None
    return "\n".join(result_lines) + f"\n--------------------\n*T·ªïng c·ªông: *${total_value:,.2f}**"

# --- WEB SERVER (FLASK) ---
app = Flask(__name__)

@app.route('/', methods=['POST'])
def webhook():
    if not BOT_TOKEN:
        print("FATAL: TELEGRAM_TOKEN environment variable not set.")
        return "Server configuration error", 500

    data = request.get_json()
    
    if "callback_query" in data:
        cb = data["callback_query"]
        answer_callback_query(cb["id"])
        if cb.get("data") == "refresh_portfolio" and "reply_to_message" in cb["message"]:
            result = process_portfolio_text(cb["message"]["reply_to_message"]["text"])
            if result:
                edit_telegram_message(cb["message"]["chat"]["id"], cb["message"]["message_id"], text=result, reply_markup=cb["message"]["reply_markup"])
        return jsonify(success=True)

    if "message" not in data or "text" not in data["message"]:
        return jsonify(success=True)

    chat_id = data["message"]["chat"]["id"]
    msg_id = data["message"]["message_id"]
    text = data["message"]["text"].strip()
    parts = text.split()
    cmd = parts[0].lower()

    if cmd.startswith('/'):
        if cmd == "/start":
            send_telegram_message(chat_id, text=(
                "Ch√†o m·ª´ng! Bot ƒë√£ s·∫µn s√†ng.\n\n"
                "**Ch·ª©c nƒÉng L·ªãch h·∫πn:**\n"
                "`/add <DD/MM HH:mm>:<T√™n c√¥ng vi·ªác>`\n"
                "`/list` - Xem danh s√°ch c√¥ng vi·ªác\n"
                "`/del <s·ªë>` - X√≥a c√¥ng vi·ªác\n\n"
                "**Ch·ª©c nƒÉng Crypto:**\n"
                "- G·ª≠i ƒë·ªãa ch·ªâ contract ƒë·ªÉ tra c·ª©u.\n"
                "- G·ª≠i portfolio ƒë·ªÉ t√≠nh to√°n."
            ))
        elif cmd == '/add':
            send_telegram_message(chat_id, text=add_task(chat_id, " ".join(parts[1:])), reply_to_message_id=msg_id)
        elif cmd == '/list':
            send_telegram_message(chat_id, text=list_tasks(chat_id), reply_to_message_id=msg_id)
        elif cmd == '/del':
            send_telegram_message(chat_id, text=delete_task(chat_id, parts[1]) if len(parts) > 1 else "C√∫ ph√°p: `/del <s·ªë>`", reply_to_message_id=msg_id)
        # C√°c l·ªánh kh√¥ng x√°c ƒë·ªãnh s·∫Ω b·ªã b·ªè qua
        return jsonify(success=True)

    # X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng (kh√¥ng ph·∫£i l·ªánh)
    if len(parts) == 1 and is_evm_address(parts[0]):
        send_telegram_message(chat_id, text=find_token_across_networks(parts[0]), reply_to_message_id=msg_id, disable_web_page_preview=True)
    else:
        portfolio_result = process_portfolio_text(text)
        if portfolio_result:
            refresh_btn = {'inline_keyboard': [[{'text': 'üîÑ Refresh', 'callback_data': 'refresh_portfolio'}]]}
            send_telegram_message(chat_id, text=portfolio_result, reply_to_message_id=msg_id, reply_markup=json.dumps(refresh_btn))
        else:
            send_telegram_message(chat_id, text="ü§î C√∫ ph√°p kh√¥ng h·ª£p l·ªá. G·ª≠i /start ƒë·ªÉ xem h∆∞·ªõng d·∫´n.", reply_to_message_id=msg_id)
                
    return jsonify(success=True)

